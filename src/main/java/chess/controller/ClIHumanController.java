package chess.controller;


import chess.model.*;
import chess.model.pieces.Piece;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Controller class for CLI handles console input
 */
public class ClIHumanController {

    public Game game;

    private final Parser parser;

    public boolean moveHappened = false;

    private String moveString;

    /**
     * Controller for the game
     * @param game current game
     */
    public ClIHumanController(Game game){

        this.game = game;
        parser = new Parser(game);

    }

    /**
     * Method which combines scanInput() with useInputToMakeMove()
     */
    public void doUserAction(){
        String input = scanInput();
        useInputToMakeMove(input);
    }

    /**
     * Method which scans the userInput
     * @return the input as String
     */
    private String scanInput(){
        if (game.german){
            System.out.println("Gebe deinen Zug ein: ");
        }
        else {
            System.out.println("Enter your move: ");
        }

        Scanner scanner = new Scanner(System.in);
        return scanner.nextLine();
    }

    /**
     * Method to analyze the input string generated by the scanInput() method.
     * Depending on this input the console will either print out all the beaten Pieces, or will send the String to the Parser class.
     * The returned object list generated in the Parser class will be split in 3 elements (startTile, endTile, promotionLetter).
     * This method now generates outputs depending on the startTile, and it's piece.
     * If everything is ok with the Piece and the startTile, the movePiece() method is called with startTile, endTile and promotionLetter as parameters,
     * If the Move is semantic legal, move is printed out in the console and the nextTurn method is called.
     * @param inputString the string generated in scanInput() and which is computed into a move.
     */
    public void useInputToMakeMove(String inputString) {

        String outputInvalid;
        String outputNotAllowed;
        if (game.german){
            outputInvalid = "!Ungueltiger Zug";
            outputNotAllowed = "!Unerlaubter Zug";        }
        else{
            outputInvalid = "!Invalid move";
            outputNotAllowed = "!Move not allowed";
        }
        moveHappened = false;
        if (!isSpecialInput(inputString)){

            List<Object> moveTiles = parser.parseInput(inputString);
            moveString = inputString;

            if (moveTiles.size() == 3) {
                Tile startTile = (Tile) moveTiles.get(0);
                Tile endTile = (Tile) moveTiles.get(1);
                String promotionLetter = (String) moveTiles.get(2);

                if (startTile.getPiece() == null || game.getCurrentPlayer() != startTile.getPiece().getColor()) {
                    System.out.println(outputNotAllowed);
                } else {
                    doTurn(startTile,endTile,promotionLetter);
                }
            } else {

                System.out.println(outputInvalid);
                System.out.println();

            }
        }
    }

    /**
     * Helper method for Special inputs such as for saving/loading a Game or show the beaten Pieces
     * @param specialInput the Special user input
     * @return the boolean value of the case a SpecialInput happened
     */
    private boolean isSpecialInput(String specialInput){

        switch (specialInput) {
            case "beaten":
            case "geschlagen":
                List<Piece> removedPieces = game.getBoard().getRemovedPieces();
                List<String> removedPiecesOutput = new ArrayList<>();
                for (Piece beatenPiece : removedPieces) {
                    char beatenPieceChar = beatenPiece.getConsoleChar(beatenPiece.getColor());
                    String beatenPieceString = Character.toString(beatenPieceChar);
                    removedPiecesOutput.add(beatenPieceString);
                }
                System.out.println(removedPiecesOutput);
                return true;
            case "save":
            case "speichern":
                try {

                    Scanner scanner = new Scanner(System.in);
                    System.out.println("Enter the absolute Path to your txt File! You could use something like: " + System.getProperty("user.home") + "\\ENTER_HERE_YOUR_FILENAME.txt");
                    String input = scanner.nextLine();

                    SaveLoadManager saveLoadManager = new SaveLoadManager(game);
                    saveLoadManager.saveGame(input);

                    System.out.println("Game saved!");


                } catch (IOException e) {
                    System.out.println("There is something wrong with the filepath");

                }
                return true;
            case "deutsch":
                game.german = true;
                return true;
            case "english":
                game.german = false;
                return true;
        }
        return false;
    }

    /**
     * helper Method to complete a turn with the input of User
     * @param startTile startTile Parsed out of inputString
     * @param endTile endTile Parsed out of inputString
     * @param promotionLetter the PromotionLetter parsed out of inputString
     */
    private void doTurn(Tile startTile, Tile endTile, String promotionLetter){
        String outputBlackInCheck;
        String outputWhiteInCheck;
        if (game.german){
            outputBlackInCheck = "Schwarz im Schach";
            outputWhiteInCheck = "Weiss im Schach";

        }
        else {
            outputBlackInCheck = "Black in check";
            outputWhiteInCheck = "White in check";

        }
        game.getBoard().movePiece(startTile, endTile, promotionLetter);

        if (game.getBoard().validSemanticMove) {
            if (GameState.getCurrentGameState() == GameState.BLACK_IN_CHECK) {
                System.out.println(outputBlackInCheck);
            }
            if (GameState.getCurrentGameState() == GameState.WHITE_IN_CHECK) {
                System.out.println(outputWhiteInCheck);
            }
            System.out.println("!" + moveString);
            moveHappened = true;
            if (game.isNetworkGame()){
                game.setSendToNetworkString(moveString);
            }
        }
        game.nextTurn();
    }


    /**
     * getter for the current game
     * @return this.game
     */
    public Game getGame () {
        return this.game;
    }

}
